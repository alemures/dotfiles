#!/usr/bin/env node

const fs = require('fs');
const os = require('os');
const utils = require('./utils');

const home = utils.getEnvVar('HOME');
const outDir = `${home}/Pictures/Screenshots`;
const editCommand = 'gimp';
const filename = '%Y-%m-%d@%H-%M-%S.png';
const msg = `Screenshot saved in ${outDir}`;

const modes = {
  '1.fullscreen': () => {
    utils.run({
      command: 'scrot',
      args: ['-d', '1', filename],
      options: { cmd: outDir },
    });
    utils.alertInfo(msg);
  },
  '2.delayed_fullscreen': () => {
    utils.run({
      command: 'scrot',
      args: ['-d', '3', filename],
      options: { cmd: outDir },
    });
    utils.alertInfo(msg);
  },
  '3.section_or_window': () => {
    utils.run({
      command: 'scrot',
      args: ['-s', filename],
      options: { cmd: outDir },
    });
    utils.alertInfo(msg);
  },
  '4.edit_fullscreen': () => {
    const commandResult = utils.run({
      command: 'command',
      args: ['-v', editCommand],
      options: { shell: true, exitOnFailure: false },
    });

    if (commandResult.status) {
      throw new Error(`Editor ${editCommand} not installed`);
    }

    // TODO: process blocks until the editor is closed, try to get the last
    // screenshoot created by using fs.readdirSync and fs.statSync to access
    // the created or modified time (ctime or mtime) and launch the image
    // editor separately with a different utils.run to check if it finish
    // once the app y launched
    utils.run({
      command: 'scrot',
      args: ['-d', '1', filename, '-e', `${editCommand} $f`],
      options: { cmd: outDir },
    });
    utils.alertInfo(msg);
  },
};

const dmenuResult = utils.run({
  command: 'dmenu',
  args: ['-i', '-l', '4', '-p', 'Screenshot type:'],
  options: { input: Object.keys(modes).join(os.EOL), silentExit: true },
});

fs.mkdirSync(outDir, { recursive: true });

const modeFn = modes[dmenuResult.stdout.trim()];
if (!modeFn) throw new Error('Invalid screenshot mode');

modeFn();
